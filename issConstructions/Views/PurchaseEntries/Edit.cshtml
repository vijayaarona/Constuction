@model issDomain.Models.PurchaseEntry

@{
    ViewBag.Title = "Edit";
}

<style>
    .header {
        margin-top: 10px;
        border-top-style: solid;
        border-top-width: 5px;
        border-top-color: #FF5F04;
        font-family: Calibri;
        font-size: 22px;
    }

    .btn-default {
        background-color: #FF5F04;
        color: white;
    }

    input, select, textarea {
        max-width: 500px;
    }

    th, td {
        border: 1px solid black;
        text-align: center;
        height: 50px;
    }

    .itemtable th {
        text-align: center;
    }

    select #Product, #TaxId {
        max-width: 500px;
    }

    .example-open .modal-backdrop {
        background-color: transparent;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="panel-group">
    <div class="panel panel-heading header" style="margin-top: 10px;border-top-style: solid;border-top-width: 5px;border-top-color: #FF5F04;font-family: Calibri;font-size: 22px;">
        Purchase Entry - Edit Page
    </div>
    <div class="panel panel-body" style="overflow:auto">
        <div class="row">

            <div class="form-group col-md-6" style=" display :none ">
                <label>Order Id</label>
                @Html.EditorFor(model => model.purchaseId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.purchaseId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <label>Purchase Date</label>
                @Html.TextBoxFor(m => m.purchaseDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
            </div>
            <div class="form-group col-md-6">
                <label>Category</label>
                @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control", @id = "categoryId" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <label>Supplier Name</label>
                @Html.DropDownList("SupplierId", null, htmlAttributes: new { @class = "form-control", @id = "SupplierId" })
                @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <label>Supplier Address</label>
                @Html.DropDownList("SupplierAddressId", null, htmlAttributes: new { @class = "form-control", @id = "SupplierAddressId" })
                @Html.ValidationMessageFor(model => model.SupplierAddressId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <label>Project Name</label>
                @Html.DropDownList("SiteNameId", null, htmlAttributes: new { @class = "form-control", @id = "ProjectId" })
                @Html.ValidationMessageFor(model => model.SiteNameId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <label>Site Name</label>
                @Html.DropDownList("SiteId", null, htmlAttributes: new { @class = "form-control", @id = "SiteId" })
                @Html.ValidationMessageFor(model => model.SiteId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <label>Site Address</label>
                @Html.DropDownList("SiteAddressId", null, htmlAttributes: new { @class = "form-control", @id = "SiteAddressId" })
                @Html.ValidationMessageFor(model => model.SiteAddressId, "", new { @class = "text-danger" })
            </div>

            <div class="form-group col-md-6" hidden>
                <label>Product No</label>
                @Html.EditorFor(model => model.ProductNo, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.ProductNo } })
                @Html.ValidationMessageFor(model => model.ProductNo, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <label>Mobile No</label>
                @Html.EditorFor(model => model.mobileno, new { htmlAttributes = new { @class = "form-control", @id = "mobileno" } })
                @Html.ValidationMessageFor(model => model.mobileno, "", new { @class = "text-danger" })
            </div>

            <div class="form-group col-md-6">
                <label>Purchase Type</label>
                @Html.EditorFor(model => model.PType, new { htmlAttributes = new { @class = "form-control", @id = "Purchasetype" } })
                @Html.ValidationMessageFor(model => model.PType, "", new { @class = "text-danger" })
            </div>
        </div>
            <div class="row">
                <div class="form-group col-md-2">
                    <label>Total Amount: </label>
                </div>
                <div class="form-group col-md-3">
                    @Html.EditorFor(model => model.TotAmount, new { htmlAttributes = new { @class = "form-control", @id = "ProTotal" } })
                    @Html.ValidationMessageFor(model => model.TotAmount, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-2">
                    <label>Discount(%): </label>
                </div>
                <div class="form-group col-md-3">
                    @Html.EditorFor(model => model.discountPercentage, new { htmlAttributes = new { @class = "form-control", @id = "disPercent" } })
                    @Html.ValidationMessageFor(model => model.discountPercentage, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-2">
                    <label>Discount Amount : </label>
                </div>
                <div class="form-group col-md-3">
                    @Html.EditorFor(model => model.totalDiscount, new { htmlAttributes = new { @class = "form-control", @id = "disAmount" } })
                    @Html.ValidationMessageFor(model => model.totalDiscount, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-2">
                    <label>Grand Total : </label>
                </div>
                <div class="form-group col-md-3">
                    @Html.EditorFor(model => model.grandTotal, new { htmlAttributes = new { @class = "form-control", @id = "ProGrandTotal" } })
                    @Html.ValidationMessageFor(model => model.grandTotal, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-2">
                    <label>Tax (%) : </label>
                </div>
                <div class="form-group col-md-3">
                    @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control", @id = "TaxP" } })
                    @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-2">
                    <label>Tax Amount : </label>
                </div>
                <div class="form-group col-md-3">
                    @Html.EditorFor(model => model.TotTax, new { htmlAttributes = new { @class = "form-control", @id = "TaxPamt" } })
                    @Html.ValidationMessageFor(model => model.TotTax, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-2">
                    <label>Net Amount : </label>
                </div>
                <div class="form-group col-md-3">
                    @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @class = "form-control", @id = "netAmt" } })
                    @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                    @*<input type="text" id="netAmt" name="netAmt" size="50" />*@
                </div>
            </div>

            <div class="form-group" style="float:right">
                <input type="submit" value="Submit" class="btn btn-default" />
                @Html.ActionLink("Back to List", "Index", null, htmlAttributes: new { @class = "btn btn-default" })
            </div>
        </div>
</div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
                let sNo = 1;
                var lstItems = [];
                var ntAmt;
                $(document).ready(function () {


                    $("#categoryId").change(function () {
                        var supNameId = $(this).find('option:selected').val();
                        SupplierId(supNameId);
                    })
                    $("#SupplierId").change(function () {
                        var supAddressId = $(this).find('option:selected').val();
                        SupplierAddressId(supAddressId);
                    })
                    $("#ProjectId").change(function () {
                        var projectSite = $(this).find('option:selected').val();
                        SiteId(projectSite);
                    })
                    $("#Product").change(function () {
                        var taxAmount = $(this).find('option:selected').val();
                        TaxId(taxAmount);
                    })



                    $("#disPercent").blur(function () {
                        debugger
                        var grandTotal = $('#ProTotal').val();
                        var disPercentage = $('#disPercent').val();
                        var calProPer = parseFloat((disPercentage / 100) * grandTotal);
                        $('#disAmount').val(calProPer.toFixed());
                        var TotAmt = parseFloat(grandTotal - calProPer);
                        $('#ProGrandTotal').val(TotAmt.toFixed());
                    });

                    $("#TaxP").blur(function () {
                        debugger

                        var taxPercentage = $('#TaxP').val();
                        var TotAmt = $('#ProGrandTotal').val();
                        var calProPer1 = parseFloat((taxPercentage / 100) * TotAmt);
                        $('#TaxPamt').val(calProPer1.toFixed());
                        var Netamt = parseFloat(TotAmt) + parseFloat(calProPer1);
                        $('#netAmt').val(Netamt.toFixed());

                    });


                });

         $(document).keydown(function (event) {
        if (event.altKey && event.which === 65) {
            $('#myModal').modal('show');
        }
    });

    $('#myModal').on('show.bs.modal', function (e)
    {
        $('body').addClass("example-open");
    }).on('hide.bs.modal', function (e)
    {
        $('body').removeClass("example-open");
    })

    function editBTN(item) {
        debugger
        var tempTR = $('#rm' + item).children();
        console.log(tempTR);

        var column = [9];
        for (var i = 0; i < tempTR.length; i++)
        {
           //console.log(tempTR[i].innerText);
            column[i] = tempTR[i].innerText;
           //Array for store the value
        }
        $('#myModal').modal('show');
        $("#Product option:contains(" + column[1] + ")").prop('selected', 'selected');
        $('#TaxId').val(column[2]);
        $('#Description').val(column[3]);
        $('#Rate').val(column[4]);
        $('#Quantity').val(column[5]);
        $('#Amount').val(column[6]);
        $('#discountAmount').val(column[7]);
        $('#TaxAmt').val(column[8]);
        $('#TotalAmt').val(column[9]);
        $('#btnSave').text("Update");


    }
    function SupplierId(supNameId)
    {
              $.ajax({
            type: 'POST',
            url: '@Url.Content("~/PurchaseRequests/SupplierId")',
            dataType: 'json',
                  data: { supplier_NameId: supNameId },
                  success: function (result)
                  {
                   var data = result;
                      $("#SupplierId").empty();

                for (var i = 0; i < data.length; i++) {
                    $("#SupplierId").append("<option value='" + data[i].ID + "'>" + data[i].Suppliername + "</option>");
                }
            },
            error: function (err) {
                console.log(err);
            }
        });
    };
    function SupplierAddressId(supAddressId)
    {
              $.ajax({
            type: 'POST',
            url: '@Url.Content("~/PurchaseRequests/SupplierAddressId")',
            dataType: 'json',
                  data: { supplier_AddressId: supAddressId },
                  success: function (result) {
                     var data = result;

                      $("#SupplierAddressId").empty();
                      for (var i = 0; i < data.length; i++)
                      {
                          $("#SupplierAddressId").append("<option value='" + data[i].ID + "'>" + data[i].address + "</option>");
                      }
                  },
                  error: function (err)
                  {
                console.log(err);
                  }
              });
    };
    function SiteId(projectSite)
    {
              $.ajax({
            type: 'POST',
            url: '@Url.Content("~/PurchaseRequests/SiteId")',
            dataType: 'json',
                  data: { site_NameId: projectSite },
                  success: function (result) {
                      var data = result;
                      $("#SiteId").empty();
                      $("#SiteAddressId").empty();
                      for (var i = 0; i < data.length; i++)
                      {
                    $("#SiteId").append("<option value='" + data[i].ID + "'>" + data[i].SiteName + "</option>");
                    $("#SiteAddressId").append("<option value='" + data[i].ID + "'>" + data[i].SiteAddress + "</option>");
                }
            },
            error: function (err) {
                console.log(err);
            }
        });
    };
     function TaxId(taxAmount)
    {
              $.ajax({
            type: 'POST',
            url: '@Url.Content("~/PurchaseRequests/TaxId")',
                  dataType: 'json',
                  data: { tax_Amount: taxAmount },
                  success: function (result) {
                     var data = result;
                      $("#TaxId").empty();
                      for (var i = 0; i < data.length; i++)
                      {
                    $("#TaxId").val(data[i].Tax)
                      }
                  },
                  error: function (err)
                  {
                console.log(err);
                  }
              });
    };


    $('#btnSave').click(function ()
    {
        debugger
        let list = {};
         list.productId = $('#Product').val();
         list.productText = $('#Product option:selected').text();
         list.purchaseRequestId = $('#RequestID').val();
         list.Description = $('#Description').val();
         list.Tax = $('#TaxId').val();
         list.Rate = $('#Rate').val();
         list.Quantity = $('#Quantity').val();
         list.Amount = $('#Amount').val();
         list.discountPercent = $('#discountPercent').val();
         list.discountAmount = $('#discountAmount').val();
         list.TaxAmount = $('#TaxAmt').val();;
         list.TotalAmount = $('#TotalAmt').val();;
         list.ProductNo = $('#ProductNo').val();;

        list.sNo = sNo;

        $.ajax({
                url: '@Url.Content("~/PurchaseRequests/savePurchages")',
                type: 'POST',
                  dataType: 'json',
            data: { PurchaseRequestTable: list },
                success: function (result)
                {
                    debugger
                    console.log(result);
                    list.Id = result;
                    lstItems.push(list);
                    console.log(lstItems);
                    bindItems();
                    $('#productId').val(0);
                    $('#Description').val('');
                    $('#Rate').val('');
                    $('#Quantity').val('');
                    $('#TaxId').val('');
                    $('#Amount').val('');
                    $('#TaxAmt').val('');
                    $('#TotalAmt').val('');
                    $('#discountAmount').val('');
                    $('#discountPercent').val('');
                    $('#gstAmount').val('');
                    $('#myModal').modal('show');
            },

            error: function (err) {
                console.log(err);
            }
        });
        //$('#myModal').modal('show');
    });
    function bindItems() {
        $('#tblpurchaserequest').empty();
        if (lstItems.length > 0) {
            debugger
            let sNo = 1;
            let grandTotal = 0;
            let TotAmt = 0;
            let NetAmount = 0;
            // let calProPer = 0;
            for (var i = 0; i < lstItems.length; i++) {
                var row = `<tr id=rm${sNo}>`
                    + `<td>${sNo}</td>`
                    + `<td>${lstItems[i].productText}</td>`
                    + `<td>${lstItems[i].Tax}</td>`
                    + `<td>${lstItems[i].Description}</td>`
                    + `<td>${lstItems[i].Rate}</td>`
                    + `<td>${lstItems[i].Quantity}</td>`
                    + `<td>${lstItems[i].Amount}</td>`
                    + `<td>${lstItems[i].discountAmount}</td>`
                    + `<td>${lstItems[i].TaxAmount}</td>`
                    + `<td>${lstItems[i].TotalAmount}</td>`
                    + `<td>
                        <button type="button" class="btn btn-default" onclick="removeTR('${lstItems[i].Id}')">Remove</button>
                        </td>`
                    + "</tr>";

                let amount = 0;

                lstItems[i].TotalAmount != null ? amount = parseFloat(lstItems[i].TotalAmount) : amount = 0;
                grandTotal += amount;

                $('#tblpurchaserequest').append(row);
                sNo++;
            }
            console.log(grandTotal);
            $('#ProTotal').val(grandTotal.toFixed());

            $("#disPercent").blur(function () {
                debugger

                var disPercentage = $('#disPercent').val();
                var calProPer = parseFloat((disPercentage / 100) * grandTotal);
                $('#disAmount').val(calProPer.toFixed());
                var TotAmt = parseFloat(grandTotal - calProPer);
                $('#ProGrandTotal').val(TotAmt.toFixed());
            });

            $("#TaxP").blur(function () {
                debugger

                var taxPercentage = $('#TaxP').val();
                var TotAmt = $('#ProGrandTotal').val();
                var calProPer1 = parseFloat((taxPercentage / 100) * TotAmt);
                $('#TaxPamt').val(calProPer1.toFixed());
                var NetAmount = parseFloat(TotAmt) + parseFloat(calProPer1);
                $('#netAmt').val(NetAmount.toFixed());

            });

        }
    }
    function Edit(item) {
        console.log('Edit', item);
        var edit = lstItems.find(x => x.Id == item);
        console.log(edit);
        $('#productId').val(0);
        $('#Description').val(edit.Description);
        $('#Rate').val(edit.Rate);
        $('#Quantity').val(edit.Quantity);
        $('#TaxId').val(edit.Tax);
        $('#Amount').val(edit.Amount);
        $('#TaxAmt').val(edit.TaxAmount);
        $('#TotalAmt').val(edit.TotalAmount);
        $('#discountAmount').val(edit.discountAmount);
        $('#discountPercent').val(edit.discountPercent);
        //$('#gstAmount').val('');
        $('#myModal').modal('show');
    }

    function removeTR(item)
    {
        debugger
        //let inNo = $('#ProductNo').val();
        let productId = $('#Product').val();
        $.ajax({
            url: '@Url.Content("~/PurchaseRequests/removePurchages")',
            type: 'POST',
            dataType: 'json',
            data: { Id: item, InNo: productId },
            success: function (result)
            {
                console.log(result);
                if (result != null)
                {
                    lstItems = result;
                    $('#tblpurchaserequest').empty();
                    if (lstItems.length > 0) {
                        debugger
                        let sNo = 1;
                        let grandTotal = 0;
                        for (var i = 0; i < lstItems.length; i++) {
                            var row = `<tr id=rm${sNo}>`
                                + `<td>${sNo}</td>`
                                + `<td>${lstItems[i].Product.ProductName}</td>`
                                + `<td>${lstItems[i].Tax}</td>`
                                + `<td>${lstItems[i].Description}</td>`
                                + `<td>${lstItems[i].Rate}</td>`
                                + `<td>${lstItems[i].Quantity}</td>`
                                + `<td>${lstItems[i].Amount}</td>`
                                + `<td>${lstItems[i].discountAmount}</td>`
                                + `<td>${lstItems[i].TaxAmount}</td>`
                                + `<td>${lstItems[i].TotalAmount}</td>`
                                + `<td>
                        <button type="button" class="btn btn-default" onclick="removeTR('${lstItems[i].ID}')">Remove</button>
                        </td>`
                                + "</tr>";
                            let amount = 0;

                            lstItems[i].TotalAmount != null ? amount = parseFloat(lstItems[i].TotalAmount) : amount = 0;
                            TotalAmt += amount;

                            $('#tblpurchaserequest').append(row);
                            sNo++;
                        }
                        console.log(TotalAmt);
                        $('#ProTotal').val(TotalAmt.toFixed());

                        $("#disPercent").blur(function () {
                            debugger

                            var disPercentage = $('#disPercent').val();
                            var calProPer = parseFloat((disPercentage / 100) * TotalAmt);
                            $('#disAmount').val(calProPer.toFixed());
                            var netAmount = parseFloat(TotalAmt - calProPer);
                            $('#netAmt').val(netAmount.toFixed());
                        });

                   }
                }
            }
        });
    }

</script>
